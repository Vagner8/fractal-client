// import { ComponentFixture, TestBed } from '@angular/core/testing';
// import { SidenavComponent } from './sidenav.component';
// import { IFractal } from '@types';
// import { appMock, Fractal } from '@utils';
// import { Component, provideExperimentalZonelessChangeDetection, signal } from '@angular/core';
// import { EventService, FractalService, StatesService, ModifiersService } from '@services';
// import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
// import { NoopAnimationsModule } from '@angular/platform-browser/animations';
// import { provideHttpClient } from '@angular/common/http';
// import { provideHttpClientTesting } from '@angular/common/http/testing';
// import { HarnessLoader } from '@angular/cdk/testing';
// import { MatButtonHarness } from '@angular/material/button/testing';
// import { CAppFractals, CHoldThreshold, CModifiers } from '@constants';
// import { Location } from '@angular/common';
// import { Router, RouterModule } from '@angular/router';

// @Component({
//   selector: 'app-dummy',
//   standalone: true,
//   template: '<div>DummyComponent</div>',
// })
// class DummyComponent {}

// describe('SidenavComponent #', () => {
//   let component: SidenavComponent;
//   let fixture: ComponentFixture<SidenavComponent>;
//   let loader: HarnessLoader;

//   let router: Router;
//   let location: Location;

//   let selectedParentFractal: IFractal;

//   beforeEach(() => {
//     TestBed.configureTestingModule({
//       imports: [
//         SidenavComponent,
//         NoopAnimationsModule,
//         RouterModule.forRoot([
//           { path: '', component: DummyComponent },
//           { path: 'simple', component: DummyComponent },
//         ]),
//       ],
//       providers: [
//         EventService,
//         ModifiersService,
//         StatesService,
//         FractalService,
//         provideHttpClient(),
//         provideHttpClientTesting(),
//         provideExperimentalZonelessChangeDetection(),
//       ],
//     }).compileComponents();
//   });

//   beforeEach(async () => {
//     router = TestBed.inject(Router);
//     location = TestBed.inject(Location);

//     fixture = TestBed.createComponent(SidenavComponent);
//     component = fixture.componentInstance;

//     loader = TestbedHarnessEnvironment.loader(fixture);
//     router.initialNavigation();
//   });

//   beforeEach(async () => {
//     selectedParentFractal = new Fractal();
//     component.ss.selectedParentFractal.set(selectedParentFractal);
//     modifiesMock = new Fractal({ dto: appMock.fractals.Modifiers, parent: selectedParentFractal });
//     collectionsMock = new Fractal({ dto: appMock.fractals.Collections, parent: selectedParentFractal });
//     component.ss.selectedSidenavTaps.set(modifiesMock);
//   });

//   describe('On table page #', () => {
//     it('Should render the modifiers taps and the collections taps', async () => {
//       const modifiersTaps = await loader.getAllHarnesses(MatButtonHarness);
//       expect(modifiersTaps.length).toBe(4);

//       component.ss.selectedSidenavTaps.set(collectionsMock);
//       const collectionsTaps = await loader.getAllHarnesses(MatButtonHarness);
//       expect(collectionsTaps.length).toBe(2);
//     });

//     it('Should disable the Edit, Save and Delete modifiers until some action happens', async () => {
//       const newTap = await loader.getHarness(MatButtonHarness.with({ text: /new/i }));
//       const editTap = await loader.getHarness(MatButtonHarness.with({ text: /edit/i }));
//       const saveTap = await loader.getHarness(MatButtonHarness.with({ text: /save/i }));
//       const deleteTap = await loader.getHarness(MatButtonHarness.with({ text: /delete/i }));
//       expect(await newTap.isDisabled()).toBeFalse();
//       expect(await editTap.isDisabled()).toBeTrue();
//       expect(await saveTap.isDisabled()).toBeTrue();
//       expect(await deleteTap.isDisabled()).toBeTrue();
//     });

//     it('Should activate the Edit and Delete modifiers when some children selected', async () => {
//       component.ss.selectedChildrenFractals.set([
//         new Fractal({ dto: appMock.fractals.Collections.fractals.Collections_2.fractals[1] }),
//       ]);
//       const newTap = await loader.getHarness(MatButtonHarness.with({ text: /new/i }));
//       const editTap = await loader.getHarness(MatButtonHarness.with({ text: /edit/i }));
//       const saveTap = await loader.getHarness(MatButtonHarness.with({ text: /save/i }));
//       const deleteTap = await loader.getHarness(MatButtonHarness.with({ text: /delete/i }));
//       expect(await newTap.isDisabled()).toBeFalse();
//       expect(await editTap.isDisabled()).toBeFalse();
//       expect(await saveTap.isDisabled()).toBeTrue();
//       expect(await deleteTap.isDisabled()).toBeFalse();
//     });

//     it('Should navigate to the edit page', async () => {
//       component.ss.selectedChildrenFractals.set([
//         new Fractal({ dto: appMock.fractals.Collections.fractals.Collections_2.fractals[1] }),
//       ]);
//       const editTap = await loader.getHarness(MatButtonHarness.with({ text: /edit/i }));
//       await editTap.click();

//       expect(location.path()).toContain(CModifiers.Edit);
//       expect(location.path()).toContain(CAppFractals.Modifiers);

//       const newTap = await loader.getHarness(MatButtonHarness.with({ text: /new/i }));
//       await newTap.click();

//       expect(location.path()).toContain(CModifiers.New);
//       expect(location.path()).toContain(CAppFractals.Modifiers);
//     });

//     describe('New modifier touched #', () => {
//       it('Should make new fractals from the selected children fractals', async () => {
//         expect(component.ss.newFractals.isEmpty).toBeTrue();
//         component.ss.selectedChildrenFractals.set([
//           collectionsMock().,
//           new Fractal({ dto: appMock.fractals.Collections.fractals.Collections_2.fractals[2] }),
//           new Fractal({ dto: appMock.fractals.Collections.fractals.Collections_2.fractals[3] }),
//         ]);
//         const newTap = await loader.getHarness(MatButtonHarness.with({ text: /new/i }));
//         await newTap.click();
//         expect(component.ss.newFractals.value.length).toBe(3);
//       });

//       it('Should create only one new fractal when no one fractal is selected', async () => {
//         expect(component.ss.newFractals.isEmpty).toBeTrue();
//         const newTap = await loader.getHarness(MatButtonHarness.with({ text: /new/i }));
//         await newTap.click();
//         await newTap.click();
//         await newTap.click();
//         expect(component.ss.newFractals.value.length).toBe(3);
//       });
//     });
//   });

//   describe('On edit page #', () => {
//     beforeEach(() => {
//       component.ss.$paramMap = signal({ get: () => CAppFractals.Modifiers } as any);
//     });

//     describe('New fractals #', () => {
//       it('Should activate the Save modifier and run the saving process when any field is dirty', async () => {
//         const saveSpy = spyOn(component['ms'], 'save');
//         const saveTap = await loader.getHarness(MatButtonHarness.with({ text: /save/i }));
//         expect(await saveTap.isDisabled()).toBeTrue();
//         component.ss.dirtyFractals.push(new Fractal());
//         const host = await saveTap.host();
//         await host.dispatchEvent('pointerdown');
//         await new Promise(resolve => setTimeout(resolve, CHoldThreshold));
//         await host.dispatchEvent('pointerup');
//         expect(saveSpy).toHaveBeenCalled();
//       });
//     });
//   });
// });
