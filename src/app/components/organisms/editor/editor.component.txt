import { ComponentFixture, TestBed } from '@angular/core/testing';
import { EditorComponent } from './editor.component';
import { StatesService } from '@services';
import { collectionsMock } from '@utils';
import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
import { HarnessLoader } from '@angular/cdk/testing';
import { provideExperimentalZonelessChangeDetection } from '@angular/core';
import { MatCardHarness } from '@angular/material/card/testing';
import { MatFormFieldHarness } from '@angular/material/form-field/testing';
import { IFractal } from '@types';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { MatInputHarness } from '@angular/material/input/testing';

describe('EditorComponent #', () => {
  let fixture: ComponentFixture<EditorComponent>;
  let component: EditorComponent;

  let loader: HarnessLoader;

  let populatedCollection: IFractal;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [EditorComponent, NoopAnimationsModule],
      providers: [StatesService, provideExperimentalZonelessChangeDetection()],
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(EditorComponent);
    component = fixture.componentInstance;

    loader = TestbedHarnessEnvironment.loader(fixture);
  });

  beforeEach(() => {
    populatedCollection = collectionsMock().populatedCollection;
    component.ss.selectedParentFractal.set(populatedCollection);
  });

  it('should render the fractals forms', async () => {
    component.ss.selectedChildrenFractals.set([
      populatedCollection.fractals.get('1')!,
      populatedCollection.fractals.get('2')!,
    ]);
    const fractalsFormsCards = await loader.getAllHarnesses(MatCardHarness);
    expect(fractalsFormsCards.length).toBe(2);
  });

  it('Should render fractal forms with controls created by the parent Occ', async () => {
    component.ss.selectedChildrenFractals.set([
      populatedCollection.fractals.get('1')!,
      populatedCollection.fractals.get('2')!,
    ]);

    const controlsInputs = await loader.getAllHarnesses(MatInputHarness);
    const controlsFields = await loader.getAllHarnesses(MatFormFieldHarness);

    expect(controlsFields.length).toBe(4);
    expect(controlsInputs.length).toBe(4);
    expect(await controlsFields[0].getLabel()).toBe('indicator_1');
    expect(await controlsInputs[0].getValue()).toBe('data_1');
    expect(await controlsFields[1].getLabel()).toBe('indicator_2');
    expect(await controlsInputs[1].getValue()).toBe('data_2');
  });
});
