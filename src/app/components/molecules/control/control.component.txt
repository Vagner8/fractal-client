// import { ComponentFixture, TestBed } from '@angular/core/testing';
// import { ControlComponent } from './control.component';
// import { HarnessLoader } from '@angular/cdk/testing';
// import { StatesService } from '@services';
// import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';
// import { appMock, controlsMock, Fractal } from '@utils';
// import { MatInputHarness } from '@angular/material/input/testing';
// import { provideExperimentalZonelessChangeDetection } from '@angular/core';

// describe('ControlComponent', () => {
//   let component: ControlComponent;
//   let fixture: ComponentFixture<ControlComponent>;

//   let louder: HarnessLoader;

//   beforeEach(() => {
//     TestBed.configureTestingModule({
//       imports: [ControlComponent],
//       providers: [StatesService, provideExperimentalZonelessChangeDetection()],
//     }).compileComponents();
//   });

//   beforeEach(async () => {
//     fixture = TestBed.createComponent(ControlComponent);
//     component = fixture.componentInstance;
//     louder = TestbedHarnessEnvironment.loader(fixture);
//   });

//   it('Should not mark new fractals as dirty', async () => {
//     const parent = new Fractal();
//     const control = controlsMock({ parent, controlsNumber: 1 })[0];
//     component.control = control;
//     const field = await louder.getHarness(MatInputHarness);
//     await field.setValue('test');
//     expect(component.ss.dirtyFractals.value[0]).not.toBe(parent);
//     expect(component.ss.dirtyControls.value[0]).not.toBe(control);
//   });

//   it('Should add fractal and control to dirty states only unique entities', async () => {
//     const parent = new Fractal({ dto: appMock.fractals.Collections.fractals.Collections_2.fractals[1] });
//     const control = controlsMock({ parent, controlsNumber: 1 })[0];
//     component.control = control;
//     const field = await louder.getHarness(MatInputHarness);
//     await field.setValue('test-1');
//     await field.setValue('test-2');
//     expect(component.ss.dirtyFractals.value.length).toBe(1);
//     expect(component.ss.dirtyControls.value.length).toBe(1);
//   });
// });
