import { ModifiersService } from '../modifiers.service';
import { Fractal } from '@utils';
import { TestBed } from '@angular/core/testing';
import { DataService } from '../data.service';
import { StatesService } from '../states.service';
import { FractalService } from '../fractal.service';
import { provideExperimentalZonelessChangeDetection } from '@angular/core';
import { HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';
import { provideHttpClient } from '@angular/common/http';
import { IFractal } from '@types';
import { ENV } from '@constants';

describe('ModifiersService #', () => {
  let service: ModifiersService;
  let httpTesting: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [
        DataService,
        StatesService,
        FractalService,
        provideHttpClient(),
        provideHttpClientTesting(),
        provideExperimentalZonelessChangeDetection(),
      ],
    });
    service = TestBed.inject(ModifiersService);
    httpTesting = TestBed.inject(HttpTestingController);
  });

  beforeEach(() => {
    service['ss'].selectedParentFractal.set(new Fractal());
  });

  describe('Save #', () => {
    let newFractals: IFractal[] = [];

    beforeEach(() => {
      newFractals = [
        new Fractal({ parent: service['selectedParent'] }),
        new Fractal({ parent: service['selectedParent'] }),
        new Fractal({ parent: service['selectedParent'] }),
      ];
    });

    it('Should save new fractals when there are only', () => {
      newFractals[1].form.markAsDirty();
      newFractals[2].form.markAsDirty();

      service['ss'].dirtyFractals.set(newFractals);

      service.save();

      const req = httpTesting.expectOne(`${ENV.API}/fractal`);

      expect(req.request.method).toBe('POST');
    });
  });

  // describe('Edit', () => {});
});
